#+title: Car Race Project
#+author: DBsMOJO
#+date: <2024-12-17 Tue>

** Class Diagram

Das Klassendiagramm gibt einen Überblick über die Beziehungen zwischen den Hauptklassen des Car Race Projects.

[[file:class-diagram.plantuml][UML Class-Diagram]]:

file:class-diagram.png

** ~public class TrackBuilder~

Die Klasse ~TrackBuilder~ ist für die Konstruktion von Rennstrecken zuständig. Sie erstellt und verwaltet Abschnitte (~Sections~) basierend auf den Eingabedaten und stellt Methoden zum Hinzufügen und Entfernen von Abschnitten bereit.

#+begin_src csharp :noweb yes :tangle ./CarProject.Logic/TrackBuilder.cs
namespace CarProject.Logic;

public class TrackBuilder
{
    <<track-builder-properties>>

    <<track-builder-constructor>>

    <<track-builder-methods>>
}
#+end_src

*** Properties

Die Eigenschaften von ~TrackBuilder~ ermöglichen den Zugriff auf die ~StartSection~, die Länge der Strecke sowie den Zugriff auf spezifische Abschnitte durch den Indexer.

#+name: track-builder-properties
#+begin_src csharp
#region properties

public Section StartSection { get; private set; }

public int Length
{
    get
    {
        int result = StartSection != null ? 1 : 0;
        Section currentSection = StartSection;

        while (currentSection.NextSection != null)
        {
            result++;
            currentSection = currentSection.NextSection;
        }

        return result;
    }
}

public Section this[int index]
{
    get
    {
        if (index < 0 || index >= this.Length) throw new ArgumentOutOfRangeException();

        Section current = StartSection;
        int currentIndex = 0;

        while (current != null)
        {
            if (currentIndex == index)
            {
                return current;
            }

            current = current.NextSection;
            currentIndex++;
        }

        throw new IndexOutOfRangeException();
    }
    set
    {
        if (index < 0 || value == null) throw new ArgumentOutOfRangeException();

        Section currentSection = this[index];


        if (index == 0)
        {
            value.NextSection = currentSection;
            currentSection.PreviousSection = value;
            StartSection = value;
        }
        else
        {
            Section previousSection = currentSection.PreviousSection;

            previousSection.NextSection = value;
            value.PreviousSection = previousSection;

            value.NextSection = currentSection;
            currentSection.PreviousSection = value;
        }
    }
}

#endregion
#+end_src

*** Constructor

Der Konstruktor von ~TrackBuilder~ initialisiert eine neue verkettete Liste von Abschnitten, die durch die Eingabedaten definiert sind. Die erste ~Section~ wird als ~StartSection~ gespeichert.

#+name: track-builder-constructor
#+begin_src csharp
#region constructor

public TrackBuilder((int speed, int length)[] sectionsData)
{
    StartSection = new Section(sectionsData[0].speed, sectionsData[0].length);

    Section lastSection = StartSection;
    for (int i = 1; i < sectionsData.Length; ++i)
    {
        Section currentSection = new Section(sectionsData[i].speed, sectionsData[i].length);
        lastSection.AddAfterMe(currentSection);
        lastSection = currentSection;
    }
}

#endregion
#+end_src

*** Methods

Die Methoden in ~TrackBuilder~ erlauben das Erstellen, Hinzufügen und Entfernen von Abschnitten.

#+name: track-builder-methods
#+begin_src csharp
#region methods

public Section Build()
{
    return StartSection;
}

public void Add(Section newSection)
{
    Section currentSection = StartSection;

    while (currentSection.NextSection != null)
    {
        currentSection = currentSection.NextSection;
    }

    currentSection.AddAfterMe(newSection);
}

public void RemoveSection(int index)
{
    if (index < 0 || index >= this.Length) throw new ArgumentOutOfRangeException();

    Section sectionToRemove = this[index];

    if (index == 0)
    {
        StartSection = StartSection.NextSection;
        if (StartSection != null)
        {
            StartSection.PreviousSection = null;
        }
    }
    else
    {
        Section previousSection = sectionToRemove.PreviousSection;
        Section nextSection = sectionToRemove.NextSection;

        if (previousSection != null)
        {
            previousSection.NextSection = nextSection;
        }

        if (nextSection != null)
        {
            nextSection.PreviousSection = previousSection;
        }
    }

    sectionToRemove.NextSection = null;
    sectionToRemove.PreviousSection = null;
}

#endregion
#+end_src

** ~public class Track~

Die Klasse ~Track~ repräsentiert eine Rennstrecke, die aus mehreren verketteten Abschnitten besteht. Sie bietet verschiedene Eigenschaften zur Berechnung von Streckeninformationen, wie z.B. die maximale Geschwindigkeit, die Gesamtlänge der Strecke und die Länge der längsten Section.

#+begin_src csharp :noweb yes :tangle ./CarProject.Logic/Track.cs
namespace CarProject.Logic;
public class Track : IEnumberable<Section>
{
    <<track-fields>>

    <<track-properties>>

    <<track-constructor>>

    <<track-methods>>
}
#+end_src

*** Fields

Das private Feld ~_startSection~ speichert die Referenz zur ersten Section der verketteten Liste.

#+name: track-fields
#+begin_src csharp
#region fields

private Section _startSection;

#endregion
#+end_src

*** Properties

Die Eigenschaften bieten Zugriff auf die ~StartSection~ und ermöglichen die Berechnung von Informationen über die gesamte Strecke.

#+name: track-properties
#+begin_src csharp
#region properties

public Section StartSection
{
    get => UpdateStartSection();
    private set => _startSection = value;
}

public int Lenght
{
    get
    {
        int result = StartSection != null ? 1 : 0;

        Section currentSection = StartSection;
        while (currentSection.NextSection != null)
        {
            ++result;
            currentSection = currentSection.NextSection;
        }

        return result;
    }
}

public Section this[int index]
{
    get
    {
        if (index < 0 || index >= this.Lenght) throw new ArgumentOutOfRangeException();

        Section current = StartSection;
        int currentIndex = 0;

        while (current != null)
        {
            if (currentIndex == index)
            {
                return current;
            }

            current = current.NextSection;
            currentIndex++;
        }

        throw new IndexOutOfRangeException();
    }
}

public int MaxSpeedOfTrack
{
    get
    {
        int result = default;
        foreach (Section section in this)
        {
            if (result < section.MaxSpeed)
            {
                result = section.MaxSpeed;
            }
        }

        return result;
    }
}

public int LongestSection
{
    get
    {
        int result = 0;
        foreach (Section section in this)
        {
            if (result < section.Length)
            {
                result = section.Length;
            }
        }

        return result;
    }
}

public int TrackLenght
{
    get
    {
        int result = 0;
        foreach (Section section in this)
        {
            result += section.Length;
        }

        return result;
    }
}

public int MinSpeedOfTrack
{
    get
    {
        int result = Int32.MaxValue;
        foreach (Section section in this)
        {
            if (section.MaxSpeed < result)
            {
                result = section.MaxSpeed;
            }
        }

        return result;
    }
}

#endregion
#+end_src

*** Constructor

Der Konstruktor initialisiert die Klasse ~Track~ mit einer ~StartSection~, die als Einstiegspunkt für die verkettete Liste dient.

#+name: track-constructor
#+begin_src csharp
#region constructor

public Track(Section startSection) => StartSection = startSection;

#endregion
#+end_src

*** Methods

Die Methoden von ~Track~ bieten die Möglichkeit, durch die verkettete Liste zu iterieren und die ~StartSection~ zu aktualisieren.

#+name: track-methods
#+begin_src csharp
#region methods

public IEnumerator<Section> GetEnumerator()
{
    Section current = StartSection;
    while (current != null)
    {
        yield return current;
        current = current.NextSection;
    }
}

IEnumerator IEnumerable.GetEnumerator()
{
    return GetEnumerator();
}

private Section UpdateStartSection()
{
    Section result = _startSection;
    while (result.PreviousSection != null)
    {
        result = result.PreviousSection;
    }

    return result;
}

#endregion
#+end_src
