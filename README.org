#+title: Car Race Project
#+author: DBsMOJO

** Class Diagram

Das Klassendiagramm gibt einen Überblick über die Beziehungen zwischen den Hauptklassen des Car Race Projects.

[[file:class-diagram.plantuml][UML Class-Diagram]]:

file:class-diagram.png

** ~public class TrackBuilder~

Die Klasse ~TrackBuilder~ ist für die Konstruktion von Rennstrecken zuständig. Sie erstellt Abschnitte basierend auf den übergebenen Daten.

#+begin_src csharp :noweb yes :tangle ./CarProject.Logic/TrackBuilder.cs
namespace CarProject.Logic;

public class TrackBuilder
{
    <<track-builder-fields>>

    <<track-builder-constructor>>

    <<track-builder-methods>>
}
#+end_src

*** Fields

Dieser Abschnitt definiert die Felder, die in der Klasse ~TrackBuilder~ verwendet werden.

#+name: track-builder-fields
#+begin_src csharp
#region fields

private Track _track;

#endregion
#+end_src

*** Constructor

Der Konstruktor initialisiert ein neues ~Track~-Objekt und füllt es mit Abschnitten, die durch die Eingabedaten definiert sind.

#+name: track-builder-constructor
#+begin_src csharp
#region constructor

public TrackBuilder((int speed, int length)[] sectionsData)
{
    _track = new();

    foreach(var (speed, lenght) in sectionsData)
    {
        _track.AddSection(new Section(speed, lenght));
    }
}

#endregion
#+end_src

*** Methods

Die Methode ~Build~ gibt die erstellte Rennstrecke zurück.

#+name: track-builder-methods
#+begin_src csharp
#region methods

public Track Build()
{
    return _track;
}

#endregion
#+end_src

** ~public class Track~

Die Klasse ~Track~ repräsentiert eine Rennstrecke, die aus mehreren Abschnitten besteht.

#+begin_src csharp :noweb yes :tangle ./CarProject.Logic/Track.cs
namespace CarProject.Logic;
public class Track
{
    <<track-fields>>

    <<track-properties>>

    <<track-constructor>>

    <<track-methods>>
}
#+end_src

*** Fields

Dieser Abschnitt definiert die Felder, die in der Klasse ~Track~ verwendet werden.

#+name: track-fields
#+begin_src csharp
#region fields

private List<Section> _sections = new();

#endregion
#+end_src

*** Properties

Die Eigenschaft ~Sections~ stellt eine schreibgeschützte Liste der Abschnitte der Rennstrecke bereit.

#+name: track-properties
#+begin_src csharp
#region properties

public IReadOnlyList<Section> Sections => _sections.AsReadOnly();

#endregion
#+end_src

*** Constructor

Der Konstruktor initialisiert die Klasse ~Track~.
Dieser Abschnitt dient als Platzhalter für zukünftige Initialisierungslogik.

#+name: track-constructor
#+begin_src csharp
#region constructor


#endregion
#+end_src

*** Methods

Die Methode ~AddSection~ erlaubt es, der Rennstrecke einen neuen Abschnitt hinzuzufügen.

#+name: track-methods
#+begin_src csharp
#region methods

public void AddSection(Section section)
{
    _sections.Add(section);
}

#endregion
#+end_src
